{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97517\\\\Desktop\\\\feedback\\\\feedback-system-frontend\\\\src\\\\components\\\\FeedbackForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './FeedbackForm.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FeedbackForm = () => {\n  _s();\n  const [serviceType, setServiceType] = useState('');\n  const [emoji, setEmoji] = useState('');\n  const [textFeedback, setTextFeedback] = useState('');\n  const [email, setEmail] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(process.env.REACT_APP_API_URL, {\n        service_type: serviceType,\n        emoji_feedback: emoji,\n        text_feedback: emoji === 'Bad' || emoji === 'Unsatisfactory' ? textFeedback : '',\n        // Send text feedback only for \"Bad\" or \"Unsatisfactory\"\n        email: email\n      });\n      alert('Feedback submitted successfully');\n      // Reset the form after submission\n      setServiceType('');\n      setEmoji('');\n      setTextFeedback('');\n      setEmail('');\n    } catch (error) {\n      console.error('Error submitting feedback:', error);\n      alert('An error occurred while submitting your feedback.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Provide Your Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"serviceType\",\n        children: \"Service Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"serviceType\",\n        value: serviceType,\n        onChange: e => setServiceType(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Pension Service\",\n          children: \"Pension Service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Real Estate Service\",\n          children: \"Real Estate Service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Loan Service\",\n          children: \"Loan Service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emoji-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Feedback:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setEmoji('Happy'),\n            className: emoji === 'Happy' ? 'selected' : '',\n            children: \"\\uD83D\\uDE0A Happy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setEmoji('Satisfactory'),\n            className: emoji === 'Satisfactory' ? 'selected' : '',\n            children: \"\\uD83D\\uDE42 Satisfactory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setEmoji('Unsatisfactory'),\n            className: emoji === 'Unsatisfactory' ? 'selected' : '',\n            children: \"\\uD83D\\uDE10 Unsatisfactory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setEmoji('Bad'),\n            className: emoji === 'Bad' ? 'selected' : '',\n            children: \"\\uD83D\\uDE1E Bad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), (emoji === 'Bad' || emoji === 'Unsatisfactory') && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"textFeedback\",\n          children: \"Additional Comments:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"textFeedback\",\n          value: textFeedback,\n          onChange: e => setTextFeedback(e.target.value),\n          maxLength: 300,\n          placeholder: \"Please provide additional feedback (max 300 characters).\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        placeholder: \"Enter your email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedbackForm, \"uQH0Io7POcBS+nT1uQAK1pMrFcY=\");\n_c = FeedbackForm;\nexport default FeedbackForm;\nvar _c;\n$RefreshReg$(_c, \"FeedbackForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","FeedbackForm","_s","serviceType","setServiceType","emoji","setEmoji","textFeedback","setTextFeedback","email","setEmail","handleSubmit","e","preventDefault","post","process","env","REACT_APP_API_URL","service_type","emoji_feedback","text_feedback","alert","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","value","onChange","target","required","type","onClick","maxLength","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/97517/Desktop/feedback/feedback-system-frontend/src/components/FeedbackForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './FeedbackForm.css';\r\n\r\nconst FeedbackForm = () => {\r\n  const [serviceType, setServiceType] = useState('');\r\n  const [emoji, setEmoji] = useState('');\r\n  const [textFeedback, setTextFeedback] = useState('');\r\n  const [email, setEmail] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await axios.post(process.env.REACT_APP_API_URL, {\r\n        service_type: serviceType,\r\n        emoji_feedback: emoji,\r\n        text_feedback: (emoji === 'Bad' || emoji === 'Unsatisfactory') ? textFeedback : '', // Send text feedback only for \"Bad\" or \"Unsatisfactory\"\r\n        email: email,\r\n      });\r\n      alert('Feedback submitted successfully');\r\n      // Reset the form after submission\r\n      setServiceType('');\r\n      setEmoji('');\r\n      setTextFeedback('');\r\n      setEmail('');\r\n    } catch (error) {\r\n      console.error('Error submitting feedback:', error);\r\n      alert('An error occurred while submitting your feedback.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"feedback-form-container\">\r\n      <h2>Provide Your Feedback</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Service Type Selection */}\r\n        <label htmlFor=\"serviceType\">Service Type:</label>\r\n        <select\r\n          id=\"serviceType\"\r\n          value={serviceType}\r\n          onChange={(e) => setServiceType(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"\">Select Service</option>\r\n          <option value=\"Pension Service\">Pension Service</option>\r\n          <option value=\"Real Estate Service\">Real Estate Service</option>\r\n          <option value=\"Loan Service\">Loan Service</option>\r\n        </select>\r\n\r\n        {/* Emoji Selection */}\r\n        <div className=\"emoji-container\">\r\n          <label>Feedback:</label>\r\n          <div>\r\n            <button type=\"button\" onClick={() => setEmoji('Happy')} className={emoji === 'Happy' ? 'selected' : ''}>\r\n              😊 Happy\r\n            </button>\r\n            <button type=\"button\" onClick={() => setEmoji('Satisfactory')} className={emoji === 'Satisfactory' ? 'selected' : ''}>\r\n              🙂 Satisfactory\r\n            </button>\r\n            <button type=\"button\" onClick={() => setEmoji('Unsatisfactory')} className={emoji === 'Unsatisfactory' ? 'selected' : ''}>\r\n              😐 Unsatisfactory\r\n            </button>\r\n            <button type=\"button\" onClick={() => setEmoji('Bad')} className={emoji === 'Bad' ? 'selected' : ''}>\r\n              😞 Bad\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Text Feedback (Conditional Rendering) */}\r\n        {(emoji === 'Bad' || emoji === 'Unsatisfactory') && (\r\n          <>\r\n            <label htmlFor=\"textFeedback\">Additional Comments:</label>\r\n            <textarea\r\n              id=\"textFeedback\"\r\n              value={textFeedback}\r\n              onChange={(e) => setTextFeedback(e.target.value)}\r\n              maxLength={300}\r\n              placeholder=\"Please provide additional feedback (max 300 characters).\"\r\n              required\r\n            />\r\n          </>\r\n        )}\r\n\r\n        {/* Email Input */}\r\n        <label htmlFor=\"email\">Your Email:</label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          placeholder=\"Enter your email\"\r\n          required\r\n        />\r\n\r\n        {/* Submit Button */}\r\n        <button type=\"submit\">Submit Feedback</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedbackForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}